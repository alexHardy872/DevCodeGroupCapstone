@model DevCodeGroupCapstone.Models.TeacherPreference


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>TeacherPreference</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TeacherPreferenceId)

        <div class="form-group">
            @Html.Label("Per Hour Rate", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PerHourRate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PerHourRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Default Lesson Length", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.defaultLessonLength, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.defaultLessonLength, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Charge for Travel", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.distanceType, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.distanceType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="radiusEditBox">
            @Html.Label("Radius of travel in miles or minutes", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.maxDistance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.maxDistance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Charge per unit of travel", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.incrementalCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.incrementalCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Hours before cancellation for refund or makeup", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TimeBeforeCancellation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TimeBeforeCancellation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div id="map" style="height: 400px; width: 400px;"></div>

<script>
    var map;

    function initMap() {

        //pin to represent the teacher's location
        var pinLocation = { lat: @ViewBag.teacherLocationLat, lng: @ViewBag.teacherLocationLng};

        //add a map
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: pinLocation
        });

        //roadmap style
        var mapOptions = {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [{ featureType: 'all', stylers: [{ saturation: -100 }, { brightness: 5 }] }],
            scrollwheel: false
        };

        //add a marker
        var marker = new google.maps.Marker({ position: pinLocation, map: map });

        //add a radius for max range
        var teacherRadius = new google.maps.Circle({
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.35,
          map: map,
          center: pinLocation,
          radius: @ViewBag.radius
        });
     }
</script>

@{
    var ApiUrlStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiUrl;
    var ApiKeyStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiKey;
    var ApiKeyCbk = DevCodeGroupCapstone.Private.ApiKey.googleMapsCallback;
    string googleMapsRequest = ApiUrlStr + ApiKeyStr + ApiKeyCbk;}

<script src=@googleMapsRequest async defer></script>

<div>
    @Html.ActionLink("Teachers", "../Person/TeacherIndex")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
