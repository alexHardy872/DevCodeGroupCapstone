@model DevCodeGroupCapstone.Models.View_Models.PersonAndLocationViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>PersonAndLocationViewModel</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.person.firstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.person.firstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.person.lastName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.person.lastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.person.subjects)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.person.subjects)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.person.ApplicationId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.person.ApplicationId)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.person.LocationId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.person.LocationId)
        </dd>
    </dl>
</div>

<div id="map" style="height: 400px; width: 400px;"></div>

<script>
    var map;

    function initMap() {

        //pin to represent the teacher's location
        var pinLocation = { lat: @Model.location.lat, lng: @Model.location.lng};
        //var pinLocation = { lat: 43.784‬‬, lng: -87.911};



        //add a map
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: pinLocation
        });

        //roadmap style
        var mapOptions = {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [{ featureType: 'all', stylers: [{ saturation: -100 }, { brightness: 5 }] }],
            scrollwheel: false
        };

        //add a marker
        var marker = new google.maps.Marker({ position: pinLocation, map: map });
        //var markerTest = new google.maps.Marker({ position: pinLocation2, map: map });

        //add a radius for max range
        var teacherRadius = new google.maps.Circle({
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.35,
          map: map,
          center: pinLocation,
          radius: @ViewBag.radius
        });
     }
</script>

@{ 
    var ApiUrlStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiUrl;
    var ApiKeyStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiKey;
    var ApiKeyCbk = DevCodeGroupCapstone.Private.ApiKey.googleMapsCallback;
    string googleMapsRequest = ApiUrlStr + ApiKeyStr + ApiKeyCbk;}

<script src=@googleMapsRequest async defer>

</script>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.person.PersonId }) |
    @Html.ActionLink("Back to List", "Index")
</p>
