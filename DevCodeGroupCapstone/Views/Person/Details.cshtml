@model DevCodeGroupCapstone.Models.View_Models.PersonAndLocationViewModel

@{
    ViewBag.Title = "Details";
}





<div class="container">
    <div class="row">

        <div class="col-md-6">

            <h4>Lesson Details</h4>
            <hr />
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.person.firstName)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.person.firstName)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.person.lastName)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.person.lastName)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.person.subjects)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.person.subjects)
                </dd>
            </dl>
        </div>
        <div class="col-md-6" id="teacherAvailability">
            <h1>@Model.person.firstName @Model.person.lastName's Availabilities</h1>
            <table id="timeslotsTable">
                <tr>
                    <td> <button>@Html.ActionLink("REQUEST CUSTOM IN-STUDIO LESSON", "../Lesson/Create", new { teacherId = Model.person.PersonId })</button> </td>
                </tr>
            </table>
            <h3 id="in-studio-price">In-Studio Lessons</h3>
            <div id="availability-list-in-studio"></div>
            <h3 id="online-price">Online Lessons</h3>
            <div id="availability-list-online"></div>
            <h3 id="in-home-price">In-Home Lessons</h3>
            <div id="availability-list-in-home"></div>
        </div>

    </div>
</div>

<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js" type="text/javascript"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js" type="text/javascript"></script>
<script src="//unpkg.com/axios/dist/axios.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>

<script>

    document.addEventListener('DOMContentLoaded', function () {

        (function ($) {

            var inStudioListData = [];
            var inHomeListData = [];
            var onlineListData = [];

            // todo: update this Ajax call to make it dynamic per stundent
            axios.get('https://localhost:44326/api/ScheduleApi?generateForView=lessonOptions&teacherIdInt=@Model.person.PersonId&studentIdInt=@Model.studentId')
                .then(function (response) {
                    inStudioListData = response.data;
                    onlineListData = response.data;
                    console.log(inStudioListData);

                    inStudioListData.forEach(function (item) {
                        $('#availability-list-in-studio')
                            .append('<div id=\"in-studio' + item.sortId + '\">' + moment(item.officialStart).format("dddd, MMMM Do YYYY, h:mm:ss a") + ' to ' + moment(item.officialEnd).format("h:mm:ss a") + '</div>')
                            .on("click", '#in-studio' + item.sortId, function () {

                                console.log("Yep.");

                                var start = new moment(start);
                                var end = new moment(end);
                                var duration = moment.duration(start.diff(end));
                                var durationAsMinutes = duration.as('minutes');


                                axios.post('https://localhost:44326/api/ScheduleApi', {
                                    travelDuration: durationAsMinutes,
                                    start: item.officialStart,
                                    end: item.officialEnd,
                                    Price: item.price,
                                    cost: item.price,
                                    teacherApproval: false,
                                    LocationId: @Model.person.LocationId,
                                    studentId: @Model.studentId,
                                    teacherId: @Model.person.PersonId,
                                    Length: item.preferences.defaultLessonLength,
                                    LessonType: "In-Studio",
                                    subject: "@Model.person.subjects"
                                }).then(function () {
                                    alert("Lesson booked.");
                                });

                            });


                    });

                    inStudioListData.forEach(function (item) {
                        $('#availability-list-online')
                            .append('<div id=\"online' + item.sortId + '\">' + moment(item.officialStart).format("dddd, MMMM Do YYYY, h:mm:ss a") + ' to ' + moment(item.officialEnd).format("h:mm:ss a") + '</div>')
                            .on("click", '#online' + item.sortId, function () {

                                console.log("Yep.");

                                var start = new moment(start);
                                var end = new moment(end);
                                var duration = moment.duration(start.diff(end));
                                var durationAsMinutes = duration.as('minutes');


                                axios.post('https://localhost:44326/api/ScheduleApi', {
                                    travelDuration: durationAsMinutes,
                                    start: item.officialStart,
                                    end: item.officialEnd,
                                    Price: item.price,
                                    cost: item.price,
                                    teacherApproval: false,
                                    LocationId: @Model.person.LocationId,
                                    studentId: @Model.studentId,
                                    teacherId: @Model.person.PersonId,
                                    Length: item.preferences.defaultLessonLength,
                                    LessonType: "Online",
                                    subject: "@Model.person.subjects"
                                }).then(function () {
                                    alert("Lesson booked.");
                                });

                            });


                    });


                    $('#in-studio-price')
                        .append(' - $' + response.data[0].price);

                    $('#online-price')
                        .append(' - $' + response.data[0].price);



                });


             axios.get('https://localhost:44326/api/ScheduleApi?generateForView=inHomeLessonOptions&teacherIdInt=@Model.person.PersonId&studentIdInt=@Model.studentId')
                .then(function (response) {
                    inHomeListData = response.data;
                    console.log(inHomeListData);

                    inHomeListData.forEach(function (item) {
                        $('#availability-list-in-home')
                            .append('<div id=\"in-home' + item.sortId + '\">' + moment(item.officialStart).format("dddd, MMMM Do YYYY, h:mm:ss a") + ' to ' + moment(item.officialEnd).format("h:mm:ss a") + '</div>')
                            .on("click", '#in-home' + item.sortId, function () {

                                console.log("Yep.");

                                var start = new moment(start);
                                var end = new moment(end);
                                var duration = moment.duration(start.diff(end));
                                var durationAsMinutes = duration.as('minutes');


                                axios.post('https://localhost:44326/api/ScheduleApi', {
                                    travelDuration: durationAsMinutes,
                                    start: item.officialStart,
                                    end: item.officialEnd,
                                    Price: item.price,
                                    cost: item.price,
                                    teacherApproval: false,
                                    LocationId: @Model.studentLocationId,
                                    studentId: @Model.studentId,
                                    teacherId: @Model.person.PersonId,
                                    Length: item.preferences.defaultLessonLength,
                                    LessonType: "In-Home",
                                    subject: "@Model.person.subjects"
                                }).then(function () {
                                    alert("Lesson booked.");
                                });

                            });


                    });

                    $('#in-home-price')
                            .append(' - $' + response.data[0].price);
                });


        })(jQuery);

    });


</script>


<div id="map" style="height: 400px; width: 400px;"></div>

<script>
    var map;

    function initMap() {

        //pin to represent the teacher's location
        var pinLocation = { lat: @Model.location.lat, lng: @Model.location.lng};

        //add a map
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 11,
            center: pinLocation
        });

        //roadmap style
        var mapOptions = {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [{ featureType: 'all', stylers: [{ saturation: -100 }, { brightness: 5 }] }],
            scrollwheel: false
        };

        //add a marker
        var marker = new google.maps.Marker({ position: pinLocation, map: map });

        //add a radius for max range
        var teacherRadius = new google.maps.Circle({
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.35,
          map: map,
          center: pinLocation,
          radius: 5 // @*@ViewBag.radius*@
        });
     }
</script>

@{
    var ApiUrlStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiUrl;
    var ApiKeyStr = DevCodeGroupCapstone.Private.ApiKey.googleMapsApiKey;
    var ApiKeyCbk = DevCodeGroupCapstone.Private.ApiKey.googleMapsCallback;
    string googleMapsRequest = ApiUrlStr + ApiKeyStr + ApiKeyCbk;}

<script src=@googleMapsRequest async defer>

</script>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.person.PersonId }) |
    @Html.ActionLink("Back to List", "Index")
</p>


